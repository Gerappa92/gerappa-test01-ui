{"version":3,"sources":["Components/Home/Home.jsx","Components/Menu/Pizza/Pizza.jsx","Components/Menu/CreatePizza/CreatePizza.jsx","Components/Menu/Menu.jsx","Components/Order/Order.jsx","Components/_AppRouter/AppRouter.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","Component","Pizza","props","this","pizza","name","vegetarian","style","color","paddingLeft","price","description","CreatePizza","handleInputChange","event","target","value","checked","setState","state","type","onChange","disabled","Menu","map","p","Order","AppRouter","fetch","then","response","json","catch","error","console","to","exact","path","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0c5e9cc2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <h1>Hello Gerappa Pizza!</h1>\r\n        </div>\r\n        <div>\r\n          <p>Welcome to my pizza house :)</p>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Pizza extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h4>\r\n            {this.props.pizza.name}{\" \"}\r\n            {this.props.pizza.vegetarian && (\r\n              <p style={{ color: \"green\", paddingLeft: \"5px\" }}>V</p>\r\n            )}\r\n          </h4>\r\n          <p>{this.props.pizza.price} z≈Ç</p>\r\n        </div>\r\n        <div>\r\n          <p>{this.props.pizza.description}</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Pizza;\r\n","import React, { Component } from \"react\";\r\n\r\nclass CreatePizza extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      name: \"\",\r\n      description: \"sos pomidorowy, ser, bazylia\",\r\n      price: 20,\r\n      vegetarian: true,\r\n    };\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value =\r\n      target.name === \"isVegetarian\" ? target.checked : target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form>\r\n          <label>\r\n            Name:{\" \"}\r\n            <input\r\n              type='text'\r\n              name='name'\r\n              value={this.state.name}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Description:{\" \"}\r\n            <input\r\n              type='text'\r\n              name='description'\r\n              value={this.state.description}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </label>\r\n          <label>\r\n            Price:{\" \"}\r\n            <input\r\n              type='number'\r\n              name='price'\r\n              value={this.state.price}\r\n              disabled={true}\r\n            />\r\n          </label>\r\n          <label>\r\n            Vegetarian:{\" \"}\r\n            <input\r\n              type='checkbox'\r\n              name='vegetarian'\r\n              value={this.state.vegetarian}\r\n              onChange={this.handleInputChange}\r\n            />\r\n          </label>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CreatePizza;\r\n","import React, { Component } from \"react\";\r\nimport Pizza from \"./Pizza/Pizza\";\r\nimport CreatePizza from \"./CreatePizza/CreatePizza\";\r\n\r\nclass Menu extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <h1>Menu</h1>\r\n        </div>\r\n        <div>\r\n          <h3>Here will be a list of pizza</h3>\r\n          <p>\r\n            {this.props.pizza.map((p) => (\r\n              <Pizza pizza={p} />\r\n            ))}\r\n          </p>\r\n        </div>\r\n        <div>\r\n          <h3>Here you will be able to create your own pizza</h3>\r\n          <CreatePizza />\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Menu;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Order extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>\r\n          <h1>Order</h1>\r\n        </div>\r\n        <div>\r\n          <p>This is a place where you will be able to order the pizza!</p>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Order;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Home from \"../Home/Home\";\r\nimport Menu from \"../Menu/Menu\";\r\nimport Order from \"../Order/Order\";\r\n\r\nclass AppRouter extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pizza: [],\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://localhost:44301/api/pizza/all\")\r\n      .then((response) => response.json())\r\n      .then((pizza) => this.setState({ pizza }))\r\n      .catch((error) => console.error(\"Menu problem:\", error));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Link to=''>Gerappa Pizza</Link>\r\n        <Link to='/Menu'>Menu</Link>\r\n        <Link to='/Order'>Order</Link>\r\n        <Switch>\r\n          <Route exact path='/Menu'>\r\n            <Menu pizza={this.state.pizza} />\r\n          </Route>\r\n          <Route exact path='/Order'>\r\n            <Order />\r\n          </Route>\r\n          <Route exact path=''>\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppRouter;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport AppRouter from \"./Components/_AppRouter/AppRouter\";\n\nfunction App() {\n  return (\n    <div className='App'>\n      <header>Gerappa Pizza</header>\n      <AppRouter />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}